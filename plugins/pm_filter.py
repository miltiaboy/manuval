import asyncio
lock = asyncio.Lock()
import re
import ast
import random
import math
from pyrogram.errors.exceptions.bad_request_400 import MediaEmpty, PhotoInvalidDimensions, WebpageMediaEmpty
from Script import script
import pyrogram
from database.connections_mdb import active_connection, all_connections, delete_connection, if_active, make_active, \
    make_inactive
from info import *
from info import ADMINS, AUTH_CHANNEL, AUTH_USERS, CUSTOM_FILE_CAPTION, AUTH_GROUPS, P_TTI_SHOW_OFF, IMDB, \
    SINGLE_BUTTON, SPELL_CHECK_REPLY, IMDB_TEMPLATE, REQ_CHANNEL, NORES_CHANNEL
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto
from pyrogram import Client, filters, enums
from pyrogram.errors import FloodWait, UserIsBlocked, MessageNotModified, PeerIdInvalid
from utils import get_size, is_subscribed, get_poster, search_gagala, temp, get_settings, save_group_settings, send_all, imdb
from database.users_chats_db import db
from database.ia_filterdb import Media2, Media3, Media4, Media5, get_file_details, get_search_results, get_bad_files, db as clientDB, db2 as clientDB2, db3 as clientDB3, db4 as clientDB4, db5 as clientDB5
from database.filters_mdb import find_gfilter, get_gfilters
import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)

BUTTONS = {}
SPELL_CHECK = {}
SEASON = {}

RATING = ["5.1 | IMDB", "6.2 | IMDB", "7.3 | IMDB", "8.4 | IMDB", "9.5 | IMDB", "8.3 | IMDB", "6.3 | IMDB"]
GENRES = ["fun, fact",
          "Thriller, Comedy",
          "Drama, Comedy",
          "Family, Drama",
          "Action, Adventure",
          "Film Noir",
          "Documentary"]

# Choose Option Settings 
LANGUAGES = ["malayalam", "mal", "tamil", "tam" ,"english", "eng", "hindi", "hin", "telugu", "tel", "kannada", "kan"]
SEASONS = ["season 1", "season 2", "season 3", "season 4", "season 5", "season 6", "season 7", "season 8", "season 9", "season 10"]
EPISODES = ["E 01", "E 02", "E 03", "E 04", "E 05", "E 06", "E 07", "E 08", "E 09", "E 10", "E 11", "E 12", "E 13", "E 14", "E 15", "E 16", "E 17", "E 18", "E 19", "E 20", "E 21", "E 22", "E 23", "E 24", "E 25", "E 26", "E 27", "E 28", "E 29", "E 30", "E 31", "E 32", "E 33", "E 34", "E 35", "E 36", "E 37", "E 38", "E 39", "E 40"]
QUALITIES = ["360p", "480p", "720p", "1080p", "1440p", "2160p"]
YEARS = ["1900", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025"]

@Client.on_message(filters.group & filters.text & filters.incoming)
async def give_filter(client, message):
    k = await global_filters(client, message)
    if k == False:
        await auto_filter(client, message)
           
        
@Client.on_callback_query(filters.regex(r"^next"))
async def next_page(bot, query):
    ident, req, key, offset = query.data.split("_")
    if int(req) not in [query.from_user.id, 0]:
        return await query.answer("oKda", show_alert=True)
    
    try:
        offset = int(offset)        
    except ValueError:
        offset = 0
        
    search = BUTTONS.get(key)
    if not search:
        await query.answer("You are using one of my old messages, please send the request again.", show_alert=True)
        return

    files, n_offset, total = await get_search_results(search, offset=offset, filter=True)
    
    try:
        n_offset = int(n_offset)        
    except ValueError:
        n_offset = 0

    if not files:
        return
    
    settings = await get_settings(query.message.chat.id)
    
    if settings['button']:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"[{get_size(file.file_size)}] {file.file_name}", callback_data=f'files#{file.file_id}'
                ),
            ]
            for file in files
        ]
        btn.insert(0, 
            [ 
                InlineKeyboardButton(f'Q·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton("L·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("S·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{file.file_name}", callback_data=f'files#{file.file_id}'
                ),
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)}",
                    callback_data=f'files_#{file.file_id}',
                ),
            ]
            for file in files
        ]
        btn.insert(0, 
            [ 
                InlineKeyboardButton(f'Q·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton("L·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("S·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
        
    if 0 < offset < 8:
        off_set = 0
    elif offset == 0:
        off_set = None
    else:
        off_set = offset - 8

    if n_offset == 0:
        btn.append(
            [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}"),
             InlineKeyboardButton(f"·¥ò·¥Ä…¢·¥á {math.ceil((offset) / 10) + 1} / {math.ceil(total / 10)}",
                                  callback_data="pages")]
        )
        
    elif off_set is None:
        btn.append(
            [InlineKeyboardButton(f"·¥ò·¥Ä…¢·¥á {math.ceil((offset) / 10) + 1} / {math.ceil(total / 10)}", callback_data="pages"),
             InlineKeyboardButton("…¥·¥áx·¥õ", callback_data=f"next_{req}_{key}_{n_offset}")])
        
    else:
        btn.append(
            [
                InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}"),
                InlineKeyboardButton(f"·¥ò·¥Ä…¢·¥á {math.ceil((offset) / 10) + 1} / {math.ceil(total / 10)}", callback_data="pages"),
                InlineKeyboardButton("…¥·¥áx·¥õ", callback_data=f"next_{req}_{key}_{n_offset}")
            ],
        )
        
    try:
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup(btn)
        )
    except MessageNotModified:
        pass
    await query.answer()
    temp.SEND_ALL_TEMP[key] = files

@Client.on_callback_query(filters.regex(r"^spolling"))
async def advantage_spoll_choker(bot, query):
    _, user, movie_ = query.data.split('#')
    if int(user) != 0 and query.from_user.id != int(user):
        return await query.answer("Search Your Own", show_alert=True)
    if movie_ == "close_spellcheck":
        return await query.message.delete()
    movies = SPELL_CHECK.get(query.message.reply_to_message.id)
    if not movies:
        return await query.answer("You are clicking on an old button which is expired.", show_alert=True)
    movie = movies[(int(movie_))]
    await query.answer('Checking for Movie in database...')
    k = await global_filters(bot, query.message, text=movie)
    if k == False:
        files, offset, total_results = await get_search_results(movie, offset=0, filter=True)
        if files:
            k = (movie, files, offset, total_results)
            await auto_filter(bot, query, k)               
        else:            
            buttons = [[
            InlineKeyboardButton('üáÆüá≥ UPDATES üáÆüá≥', url='https://t.me/UrvashiTheaters_Main')
            ]]
            reply_markup=InlineKeyboardMarkup(buttons)
            
            reqstr1 = query.from_user.id if query.from_user else 0
            reqstr = await bot.get_users(reqstr1)
            await bot.send_message(chat_id=NORES_CHANNEL, text=(script.NORSLTS.format(reqstr.id, reqstr.mention, movie)))
            k = await query.message.edit_text(text=script.MOVREQ_TXT, reply_markup=reply_markup)
            await asyncio.sleep(30)
            await k.delete()
            
# Year 
@Client.on_callback_query(filters.regex(r"^years#"))
async def years_cb_handler(client: Client, query: CallbackQuery):

    try:
        if int(query.from_user.id) not in [query.message.reply_to_message.from_user.id, 0]:
            return await query.answer(
                f"‚ö†Ô∏è  ú·¥á ü ü·¥è{query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥áQ·¥ú·¥áÍú±·¥õ,\n Ä·¥áQ·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
                show_alert=True,
            )
    except:
        pass
    _, search, key = query.data.split("#")
    btn = []
    for i in range(0, len(YEARS)-1, 4):
        row = []
        for j in range(4):
            if i+j < len(YEARS):
                row.append(
                    InlineKeyboardButton(
                        text=YEARS[i+j].title(),
                        callback_data=f"fy#{YEARS[i+j].lower()}#{search}#{key}"
                    )
                )
        btn.append(row)

    btn.insert(
        0,
        [
            InlineKeyboardButton(
                text="s·¥á ü·¥á·¥Ñ·¥õ  è·¥è·¥ú Ä  è·¥á·¥Ä Ä", callback_data="ident"
            )
        ],
    )
    req = query.from_user.id
    offset = 0
    btn.append([InlineKeyboardButton(text="‚Ü∫  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è Íú∞…™ ü·¥ás ‚Üª", callback_data=f"next_{req}_{key}_{offset}")])

    await query.edit_message_reply_markup(InlineKeyboardMarkup(btn))
    

@Client.on_callback_query(filters.regex(r"^fy#"))
async def filter_yearss_cb_handler(client: Client, query: CallbackQuery):
    _, lang, search, key = query.data.split("#")

    search1 = search.replace("_", " ")
    req = query.from_user.id
    chat_id = query.message.chat.id
    message = query.message
    if int(req) not in [query.message.reply_to_message.from_user.id, 0]:
        return await query.answer(
            f"‚ö†Ô∏è  ú·¥á ü ü·¥è{query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥áQ·¥ú·¥áÍú±·¥õ,\n Ä·¥áQ·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
            show_alert=True,
        )

    search = f"{search1} {lang}"     
    files, offset, total = await get_search_results(search, max_results=8)
    if not files:
        await query.answer("üö´ ùó°ùóº ùóôùó∂ùóπùó≤ ùó™ùó≤ùóøùó≤ ùóôùóºùòÇùóªùó± üö´", show_alert=1)
        return    
    settings = await get_settings(message.chat.id)
    if settings['button']:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)} {file.file_name}", callback_data=f'files#{file.file_id}'
                ),
            ]
            for file in files
        ]
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{file.file_name}", callback_data=f'files#{file.file_id}'
                ),
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)}",
                    callback_data=f'files_#{file.file_id}',
                ),
            ]
            for file in files
        ]
    BUTTONS[key] = search
    
    if offset != "":
        btn.append(
            [InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"), InlineKeyboardButton(text=f"1/{math.ceil(int(total)/10)}",callback_data="pages"), InlineKeyboardButton(text="…¥·¥áx·¥õ",callback_data=f"next_{req}_{key}_{offset}")]
        )
    else:
        btn.append(
                    [InlineKeyboardButton(text="üö∏ ‡¥â‡µº‡¥µ‡¥∂‡¥ø ‡¥§‡µÄ‡¥Ø‡¥±‡µç‡¥±‡µá‡¥¥‡µç‚Äå‡¥∏‡µç üö∏", url="https://t.me/movies_club_2019")]
        )
    await query.edit_message_reply_markup(InlineKeyboardMarkup(btn))
    temp.SEND_ALL_TEMP[key] = files
    
@Client.on_callback_query(filters.regex(r"^episodes#"))
async def episodes_cb_handler(client: Client, query: CallbackQuery):

    try:
        if int(query.from_user.id) not in [query.message.reply_to_message.from_user.id, 0]:
            return await query.answer(
                f"‚ö†Ô∏è  ú·¥á ü ü·¥è{query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥áQ·¥ú·¥áÍú±·¥õ,\n Ä·¥áQ·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
                show_alert=True,
            )
    except:
        pass
    _, season, search, key = query.data.split("#")
    btn = []
    for i in range(0, len(EPISODES)-1, 4):
        row = []
        for j in range(4):
            if i+j < len(EPISODES):
                row.append(
                    InlineKeyboardButton(
                        text=EPISODES[i+j].title(),
                        callback_data=f"fe#{EPISODES[i+j].lower()}#{season}#{search}#{key}"
                    )
                )
        btn.append(row)

    btn.insert(
        0,
        [
            InlineKeyboardButton(
                text="s·¥á ü·¥á·¥Ñ·¥õ  è·¥è·¥ú Ä ·¥á·¥ò…™s·¥è·¥Ö·¥á", callback_data="ident"
            )
        ],
    )
    req = query.from_user.id
    offset = 0
    btn.append([InlineKeyboardButton(text="‚Ü≠  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è s·¥á·¥Äs·¥è…¥ ‚Ü≠", callback_data=f"fs#{season}#{search}#{key}")])

    await query.edit_message_reply_markup(InlineKeyboardMarkup(btn))
    

@Client.on_callback_query(filters.regex(r"^fe#"))
async def filter_episodes_cb_handler(client: Client, query: CallbackQuery):
    _, episode, season, search, key = query.data.split("#")    
    req = query.from_user.id
    chat_id = query.message.chat.id
    message = query.message
    episode_number = int(episode.split()[1])
    files = SEASON.get(key)
    search_terms = [
        f"e{episode_number}", f"e {episode_number}", f"e{episode_number:02d}", f"e {episode_number:02d}",
        f"ep{episode_number}", f"ep {episode_number}", f"ep{episode_number:02d}", f"ep {episode_number:02d}",
        f"episode{episode_number}", f"episode {episode_number}", f"episode{episode_number:02d}", f"episode {episode_number:02d}"
    ]
    try:
        if int(req) not in [query.message.reply_to_message.from_user.id, 0]:
            return await query.answer(
                f"‚ö†Ô∏è  ú·¥á ü ü·¥è{query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥áQ·¥ú·¥áÍú±·¥õ,\n Ä·¥áQ·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
                show_alert=True,
            )
    except:
        pass
    files = [file for file in files if any(re.search(term, file.file_name, re.IGNORECASE) for term in search_terms)]
    files = files[:10]
    if not files:
        await query.answer("üö´ ùó°ùóº ùóôùó∂ùóπùó≤ ùó™ùó≤ùóøùó≤ ùóôùóºùòÇùóªùó± üö´", show_alert=1)
        return
    settings = await get_settings(message.chat.id)
    pre = 'filep' if settings['file_secure'] else 'file'
    if settings['button']:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)} {file.file_name}", callback_data=f'files#{file.file_id}'
                ),
            ]
            for file in files
        ]
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{file.file_name}", callback_data=f'files#{file.file_id}'
                ),
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)}",
                    callback_data=f'files_#{file.file_id}',
                ),
            ]
            for file in files
        ]        
    btn.append([InlineKeyboardButton(text="‚Ü≠  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è s·¥á·¥Äs·¥è…¥ ‚Ü≠", callback_data=f"fs#{season}#{search}#{key}")])

    await query.edit_message_reply_markup(InlineKeyboardMarkup(btn))

@Client.on_callback_query(filters.regex(r"^seasons#"))
async def seasons_cb_handler(client: Client, query: CallbackQuery):

    try:
        if int(query.from_user.id) not in [query.message.reply_to_message.from_user.id, 0]:
            return await query.answer(
                f"‚ö†Ô∏è  ú·¥á ü ü·¥è{query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥áQ·¥ú·¥áÍú±·¥õ,\n Ä·¥áQ·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
                show_alert=True,
            )
    except:
        pass
    
    _, search, key = query.data.split("#")
    btn = []
    for i in range(0, len(SEASONS)-1, 2):
        btn.append([
            InlineKeyboardButton(
                text=SEASONS[i].title(),
                callback_data=f"fs#{SEASONS[i].lower()}#{search}#{key}"
            ),
            InlineKeyboardButton(
                text=SEASONS[i+1].title(),
                callback_data=f"fs#{SEASONS[i+1].lower()}#{search}#{key}"
            ),
        ])

    btn.insert(
        0,
        [
            InlineKeyboardButton(
                text="üëá ùñ≤ùñæùóÖùñæùñºùóç Season üëá", callback_data="ident"
            )
        ],
    )
    req = query.from_user.id
    offset = 0
    btn.append([InlineKeyboardButton(text="‚Ü≠  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è Íú∞…™ ü·¥ás ‚Äã‚Ü≠", callback_data=f"next_{req}_{key}_{offset}")])

    await query.edit_message_reply_markup(InlineKeyboardMarkup(btn))


@Client.on_callback_query(filters.regex(r"^fs#"))
async def filter_seasons_cb_handler(client: Client, query: CallbackQuery):
    _, season, search, key = query.data.split("#")

    search1 = search.replace("_", " ")
    req = query.from_user.id
    chat_id = query.message.chat.id
    message = query.message
    if int(req) not in [query.message.reply_to_message.from_user.id, 0]:
        return await query.answer(
            f"‚ö†Ô∏è  ú·¥á ü ü·¥è {query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥áQ·¥ú·¥áÍú±·¥õ,\n Ä·¥áQ·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
            show_alert=True,
        )

    season_number = int(season.split()[1])
    search_terms = [
        f"s{season_number}", f"s{season_number:02d}", 
        f"season{season_number}", f"season{season_number:02d}",
        f"season {season_number}", f"season {season_number:02d}"
    ]
    
    files, offset, total = await get_search_results(search1, max_results=50)
    files1 = [file for file in files if any(re.search(term, file.file_name, re.IGNORECASE) for term in search_terms)]
    files = files1[:9]  
    if not files:
        await query.answer("üö´ ùó°ùóº ùóôùó∂ùóπùó≤ ùó™ùó≤ùóøùó≤ ùóôùóºùòÇùóªùó± üö´", show_alert=1)
        return

    settings = await get_settings(message.chat.id)
    if settings['button']:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)} {file.file_name}", callback_data=f'files#{file.file_id}'
                ),
            ]
            for file in files
        ]
        btn.insert(0, 
            [ 
                InlineKeyboardButton(f'Q·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton("L·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("S·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
        
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{file.file_name}", callback_data=f'files#{file.file_id}'
                ),
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)}",
                    callback_data=f'files_#{file.file_id}',
                ),
            ]
            for file in files
        ]
        btn.insert(0, 
            [ 
                InlineKeyboardButton(f'Q·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton("L·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("S·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
        
    offset = 0
    btn.append([InlineKeyboardButton(text="‚Ü≠  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è Íú∞…™ ü·¥ás ‚Äã‚Ü≠", callback_data=f"next_{req}_{key}_{offset}")])

    await query.edit_message_reply_markup(InlineKeyboardMarkup(btn))
    SEASON[key] = files1
    temp.SEND_ALL_TEMP[key] = files
    
@Client.on_callback_query(filters.regex(r"^qualities#"))
async def qualities_cb_handler(client: Client, query: CallbackQuery):

    try:
        if int(query.from_user.id) not in [query.message.reply_to_message.from_user.id, 0]:
            return await query.answer(
                f"‚ö†Ô∏è  ú·¥á ü ü·¥è{query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥áQ·¥ú·¥áÍú±·¥õ,\n Ä·¥áQ·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
                show_alert=False,
            )
    except:
        pass
    _, search, key = query.data.split("#")
    btn = []
    for i in range(0, len(QUALITIES)-1, 2):
        btn.append([
            InlineKeyboardButton(
                text=QUALITIES[i].title(),
                callback_data=f"fl#{QUALITIES[i].lower()}#{search}#{key}"
            ),
            InlineKeyboardButton(
                text=QUALITIES[i+1].title(),
                callback_data=f"fl#{QUALITIES[i+1].lower()}#{search}#{key}"
            ),
        ])

    btn.insert(
        0,
        [
            InlineKeyboardButton(
                text="‚áä Íú±·¥á ü·¥á·¥Ñ·¥õ  è·¥è·¥ú Ä «´·¥ú·¥Ä ü…™·¥õ è ‚áä", callback_data="ident"
            )
        ],
    )
    req = query.from_user.id
    offset = 0
    btn.append([InlineKeyboardButton(text="‚Ü≠  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è Íú∞…™ ü·¥ás ‚Ü≠", callback_data=f"next_{req}_{key}_{offset}")])

    await query.edit_message_reply_markup(InlineKeyboardMarkup(btn))
    

@Client.on_callback_query(filters.regex(r"^fl#"))
async def filter_qualities_cb_handler(client: Client, query: CallbackQuery):
    _, qual, search, key = query.data.split("#")
    search = search.replace("_", " ")    
    req = query.from_user.id
    chat_id = query.message.chat.id
    message = query.message
    try:
        if int(req) not in [query.message.reply_to_message.from_user.id, 0]:
            return await query.answer(
                f"‚ö†Ô∏è  ú·¥á ü ü·¥è{query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥áQ·¥ú·¥áÍú±·¥õ,\n Ä·¥áQ·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
                show_alert=False,
            )
    except:
        pass
    searchagain = search
    search = f"{search} {qual}" 
    BUTTONS[key] = search

    files, offset, total = await get_search_results(search, max_results=8)
    # files = [file for file in files if re.search(lang, file.file_name, re.IGNORECASE)]
    if not files:
        await query.answer("üö´ ùó°ùóº ùóôùó∂ùóπùó≤ ùó™ùó≤ùóøùó≤ ùóôùóºùòÇùóªùó± üö´", show_alert=1)
        return
    settings = await get_settings(message.chat.id)
    pre = 'filep' if settings['file_secure'] else 'file'
    if settings['button']:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)} {file.file_name}", callback_data=f'files#{file.file_id}'
                ),
            ]
            for file in files
        ]
        btn.insert(0, 
            [ 
                InlineKeyboardButton(f'Q·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton("L·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("S·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{file.file_name}", callback_data=f'files#{file.file_id}'
                ),
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)}",
                    callback_data=f'files_#{file.file_id}',
                ),
            ]
            for file in files
        ]
        btn.insert(0, 
            [ 
                InlineKeyboardButton(f'Q·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton("L·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("S·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
    BUTTONS[key] = search
    
    if offset != "":
        btn.append(
            [InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"), InlineKeyboardButton(text=f"1/{math.ceil(int(total)/10)}",callback_data="pages"), InlineKeyboardButton(text="…¥·¥áx·¥õ",callback_data=f"next_{req}_{key}_{offset}")]
        )
    else:
        btn.append(
                    [InlineKeyboardButton(text="üö∏ ‡¥â‡µº‡¥µ‡¥∂‡¥ø ‡¥§‡µÄ‡¥Ø‡¥±‡µç‡¥±‡µá‡¥¥‡µç‚Äå‡¥∏‡µç üö∏", url="https://t.me/movies_club_2019")]
        )
    await query.edit_message_reply_markup(InlineKeyboardMarkup(btn))
    temp.SEND_ALL_TEMP[key] = files

@Client.on_callback_query(filters.regex(r"^languages#"))
async def languages_cb_handler(client: Client, query: CallbackQuery):

    try:
        if int(query.from_user.id) not in [query.message.reply_to_message.from_user.id, 0]:
            return await query.answer(
                f"‚ö†Ô∏è  ú·¥á ü ü·¥è{query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥áQ·¥ú·¥áÍú±·¥õ,\n Ä·¥áQ·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
                show_alert=True,
            )
    except:
        pass
    _, search, key = query.data.split("#")
    btn = []
    for i in range(0, len(LANGUAGES)-1, 2):
        btn.append([
            InlineKeyboardButton(
                text=LANGUAGES[i].title(),
                callback_data=f"fl#{LANGUAGES[i].lower()}#{search}#{key}"
            ),
            InlineKeyboardButton(
                text=LANGUAGES[i+1].title(),
                callback_data=f"fl#{LANGUAGES[i+1].lower()}#{search}#{key}"
            ),
        ])

    btn.insert(
        0,
        [
            InlineKeyboardButton(
                text="‚òü  Íú±·¥á ü·¥á·¥Ñ·¥õ  è·¥è·¥ú Ä  ü·¥Ä…¥…¢·¥ú·¥Ä…¢·¥áÍú±  ‚òü", callback_data="ident"
            )
        ],
    )
    req = query.from_user.id
    offset = 0
    btn.append([InlineKeyboardButton(text="‚Ü∫  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è Íú∞…™ ü·¥ás ‚Üª", callback_data=f"next_{req}_{key}_{offset}")])

    await query.edit_message_reply_markup(InlineKeyboardMarkup(btn))
    
@Client.on_callback_query(filters.regex(r"^fl#"))
async def filter_languages_cb_handler(client: Client, query: CallbackQuery):
    _, lang, search, key = query.data.split("#")

    search1 = search.replace("_", " ")
    req = query.from_user.id
    chat_id = query.message.chat.id
    message = query.message
    if int(req) not in [query.message.reply_to_message.from_user.id, 0]:
        return await query.answer(
            f"‚ö†Ô∏è  ú·¥á ü ü·¥è{query.from_user.first_name},\n·¥õ ú…™Íú± …™Íú± …¥·¥è·¥õ  è·¥è·¥ú Ä ·¥ç·¥è·¥†…™·¥á  Ä·¥áQ·¥ú·¥áÍú±·¥õ,\n Ä·¥áQ·¥ú·¥áÍú±·¥õ  è·¥è·¥ú Ä'Íú±...",
            show_alert=True,
        )

    search = f"{search1} {lang}"     
    files, offset, total = await get_search_results(search, max_results=8)
    files = [file for file in files if re.search(lang, file.file_name, re.IGNORECASE)]
    if not files:
        await query.answer("üö´ ùó°ùóº ùóôùó∂ùóπùó≤ ùó™ùó≤ùóøùó≤ ùóôùóºùòÇùóªùó± üö´", show_alert=1)
        return

    settings = await get_settings(message.chat.id)
    if settings['button']:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)} {file.file_name}", callback_data=f'files#{file.file_id}'
                ),
            ]
            for file in files
        ]
        btn.insert(0, 
            [ 
                InlineKeyboardButton(f'Q·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton("L·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("S·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{file.file_name}", callback_data=f'files#{file.file_id}'
                ),
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)}",
                    callback_data=f'files_#{file.file_id}',
                ),
            ]
            for file in files
        ]
        btn.insert(0, 
            [ 
                InlineKeyboardButton(f'Q·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton("L·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("S·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
    BUTTONS[key] = search
    
    if offset != "":
        btn.append(
            [InlineKeyboardButton("·¥ò·¥Ä…¢·¥á", callback_data="pages"), InlineKeyboardButton(text=f"1/{math.ceil(int(total)/10)}",callback_data="pages"), InlineKeyboardButton(text="…¥·¥áx·¥õ",callback_data=f"next_{req}_{key}_{offset}")]
        )
    else:
        btn.append(
                    [InlineKeyboardButton(text="üö∏ ‡¥â‡µº‡¥µ‡¥∂‡¥ø ‡¥§‡µÄ‡¥Ø‡¥±‡µç‡¥±‡µá‡¥¥‡µç‚Äå‡¥∏‡µç üö∏", url="https://t.me/movies_club_2019")]
        )
    await query.edit_message_reply_markup(InlineKeyboardMarkup(btn))
    temp.SEND_ALL_TEMP[key] = files
    
@Client.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    if query.data == "close_data":
        await query.message.delete()
    elif query.data == "delallconfirm":
        userid = query.from_user.id
        chat_type = query.message.chat.type

        if chat_type == enums.ChatType.PRIVATE:
            grpid = await active_connection(str(userid))
            if grpid is not None:
                grp_id = grpid
                try:
                    chat = await client.get_chat(grpid)
                    title = chat.title
                except:
                    await query.message.edit_text("Make sure I'm present in your group!!", quote=True)
                    return await query.answer('Piracy Is Crime')
            else:
                await query.message.edit_text(
                    "I'm not connected to any groups!\nCheck /connections or connect to any groups",
                    quote=True
                )
                return await query.answer('Piracy Is Crime')

        elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            grp_id = query.message.chat.id
            title = query.message.chat.title

        else:
            return await query.answer('Piracy Is Crime')

        st = await client.get_chat_member(grp_id, userid)
        if (st.status == enums.ChatMemberStatus.OWNER) or (str(userid) in ADMINS):
            await del_all(query.message, grp_id, title)
        else:
            await query.answer("You need to be Group Owner or an Auth User to do that!", show_alert=True)
    elif query.data == "delallcancel":
        userid = query.from_user.id
        chat_type = query.message.chat.type

        if chat_type == enums.ChatType.PRIVATE:
            await query.message.reply_to_message.delete()
            await query.message.delete()

        elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            grp_id = query.message.chat.id
            st = await client.get_chat_member(grp_id, userid)
            if (st.status == enums.ChatMemberStatus.OWNER) or (str(userid) in ADMINS):
                await query.message.delete()
                try:
                    await query.message.reply_to_message.delete()
                except:
                    pass
            else:
                await query.answer("That's not for you!!", show_alert=True)
    elif "groupcb" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        act = query.data.split(":")[2]
        hr = await client.get_chat(int(group_id))
        title = hr.title
        user_id = query.from_user.id

        if act == "":
            stat = "CONNECT"
            cb = "connectcb"
        else:
            stat = "DISCONNECT"
            cb = "disconnect"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{stat}", callback_data=f"{cb}:{group_id}"),
             InlineKeyboardButton("DELETE", callback_data=f"deletecb:{group_id}")],
            [InlineKeyboardButton("BACK", callback_data="backcb")]
        ])

        await query.message.edit_text(
            f"Group Name : **{title}**\nGroup ID : `{group_id}`",
            reply_markup=keyboard,
            parse_mode=enums.ParseMode.MARKDOWN
        )
        return await query.answer('Piracy Is Crime')
    elif "connectcb" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        hr = await client.get_chat(int(group_id))

        title = hr.title

        user_id = query.from_user.id

        mkact = await make_active(str(user_id), str(group_id))

        if mkact:
            await query.message.edit_text(
                f"Connected to **{title}**",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        else:
            await query.message.edit_text('Some error occurred!!', parse_mode=enums.ParseMode.MARKDOWN)
        return await query.answer('Piracy Is Crime')
    elif "disconnect" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        hr = await client.get_chat(int(group_id))

        title = hr.title
        user_id = query.from_user.id

        mkinact = await make_inactive(str(user_id))

        if mkinact:
            await query.message.edit_text(
                f"Disconnected from **{title}**",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        else:
            await query.message.edit_text(
                f"Some error occurred!!",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        return await query.answer('Piracy Is Crime')
    elif "deletecb" in query.data:
        await query.answer()

        user_id = query.from_user.id
        group_id = query.data.split(":")[1]

        delcon = await delete_connection(str(user_id), str(group_id))

        if delcon:
            await query.message.edit_text(
                "Successfully deleted connection"
            )
        else:
            await query.message.edit_text(
                f"Some error occurred!!",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        return await query.answer('Piracy Is Crime')
    elif query.data == "backcb":
        await query.answer()

        userid = query.from_user.id

        groupids = await all_connections(str(userid))
        if groupids is None:
            await query.message.edit_text(
                "There are no active connections!! Connect to some groups first.",
            )
            return await query.answer('Piracy Is Crime')
        buttons = []
        for groupid in groupids:
            try:
                ttl = await client.get_chat(int(groupid))
                title = ttl.title
                active = await if_active(str(userid), str(groupid))
                act = " - ACTIVE" if active else ""
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text=f"{title}{act}", callback_data=f"groupcb:{groupid}:{act}"
                        )
                    ]
                )
            except:
                pass
        if buttons:
            await query.message.edit_text(
                "Your connected group details ;\n\n",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
    elif "alertmessage" in query.data:
        grp_id = query.message.chat.id
        i = query.data.split(":")[1]
        keyword = query.data.split(":")[2]
        reply_text, btn, alerts, fileid = await find_filter(grp_id, keyword)
        if alerts is not None:
            alerts = ast.literal_eval(alerts)
            alert = alerts[int(i)]
            alert = alert.replace("\\n", "\n").replace("\\t", "\t")
            await query.answer(alert, show_alert=True)
    if query.data.startswith("file"):
        ident, file_id = query.data.split("#")
        files_ = await get_file_details(file_id)
        if not files_:
            return await query.answer('No such file exist.')
        files = files_[0]
        title = files.file_name        
        size = get_size(files.file_size)   
        f_caption = files.file_name
        settings = await get_settings(query.message.chat.id)     
        if CUSTOM_FILE_CAPTION:
            try:
                f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption, mention=query.from_user.mention)
            except Exception as e:
                logger.exception(e)
            f_caption = f_caption
        if f_caption is None:
            f_caption = f"{files.file_name}"
        try:
            if (AUTH_CHANNEL or REQ_CHANNEL) and not await is_subscribed(client, query):
                await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
                return
            elif settings['botpm']:
                await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
                return
            else:
                await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
                return
        except UserIsBlocked:
            await query.answer('Unblock the bot mahn !', show_alert=True)
        except PeerIdInvalid:
            await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
        except Exception as e:
            await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
    elif query.data.startswith("checksub"):
        if (AUTH_CHANNEL or REQ_CHANNEL) and not await is_subscribed(client, query):
            await query.answer("I Like Your Smartness, But Don't Be Oversmart üòí", show_alert=True)
            return
        ident, file_id = query.data.split("#")
        files_ = await get_file_details(file_id)
        if not files_:
            return await query.answer('No such file exist.')
        files = files_[0]
        title = files.file_name
        size = get_size(files.file_size)
        f_caption = files.file_name
        if CUSTOM_FILE_CAPTION:
            try:
                f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption, mention=query.from_user.mention)
            except Exception as e:
                logger.exception(e)
                f_caption = f_caption
        if f_caption is None:
            f_caption = f"{title}"
        await query.answer()
        await client.send_cached_media(
            chat_id=query.from_user.id,
            file_id=file_id,
            caption=f_caption,
            protect_content=True if ident == 'checksubp' else False
        )
    elif query.data.startswith("killfilesdq"):
        ident, keyword = query.data.split("#")
        await query.message.edit_text(f"<b>F·¥á·¥õ·¥Ñ ú…™…¥…¢ F…™ ü·¥ás “ì·¥è Ä  è·¥è·¥ú Ä ·¥èÃ®·¥ú·¥á Ä è {keyword} ·¥è…¥ DB... P ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...</b>")
        files_media1, files_media2, files_media3, files_media4, total_media = await get_bad_files(keyword)        
        await query.message.edit_text(f"<b>F·¥è·¥ú…¥·¥Ö {total_media} F…™ ü·¥ás “ì·¥è Ä  è·¥è·¥ú Ä ·¥èÃ®·¥ú·¥á Ä è {keyword} !\n\nF…™ ü·¥á ·¥Ö·¥á ü·¥á·¥õ…™·¥è…¥ ·¥ò Ä·¥è·¥Ñ·¥áss ·¥°…™ ü ü s·¥õ·¥Ä Ä·¥õ …™…¥ 5 s·¥á·¥Ñ·¥è…¥·¥Ös!</b>")
        await asyncio.sleep(5)
        deleted = 0
        async with lock:
            try:
                # Delete files from Media collection
                for file in files_media1:
                    file_ids = file.file_id
                    file_name = file.file_name
                    result = await Media2.collection.delete_one({
                        '_id': file_ids,
                    })
                    if result.deleted_count:
                        logger.info(f'F…™ ü·¥á F·¥è·¥ú…¥·¥Ö “ì·¥è Ä  è·¥è·¥ú Ä ·¥èÃ®·¥ú·¥á Ä è {keyword}! S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö {file_name} “ì Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.')
                    deleted += 1
                    if deleted % 100 == 0:
                        await query.message.edit_text(f"<b>P Ä·¥è·¥Ñ·¥áss s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö “ì·¥è Ä ·¥Ö·¥á ü·¥á·¥õ…™…¥…¢ “ì…™ ü·¥ás “ì Ä·¥è·¥ç DB. S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö {str(deleted)} “ì…™ ü·¥ás “ì Ä·¥è·¥ç DB “ì·¥è Ä  è·¥è·¥ú Ä ·¥èÃ®·¥ú·¥á Ä è {keyword} !\n\nP ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...</b>")
                # Delete files from Mediaa collection
                for file in files_media2:
                    file_ids = file.file_id
                    file_name = file.file_name
                    result = await Media3.collection.delete_one({
                        '_id': file_ids,
                    })
                    if result.deleted_count:
                        logger.info(f'F…™ ü·¥á F·¥è·¥ú…¥·¥Ö “ì·¥è Ä  è·¥è·¥ú Ä ·¥èÃ®·¥ú·¥á Ä è {keyword}! S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö {file_name} “ì Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.')
                    deleted += 1
                    if deleted % 100 == 0:
                        await query.message.edit_text(f"<b>P Ä·¥è·¥Ñ·¥áss s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö “ì·¥è Ä ·¥Ö·¥á ü·¥á·¥õ…™…¥…¢ “ì…™ ü·¥ás “ì Ä·¥è·¥ç DB. S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö {str(deleted)} “ì…™ ü·¥ás “ì Ä·¥è·¥ç DB “ì·¥è Ä  è·¥è·¥ú Ä ·¥èÃ®·¥ú·¥á Ä è {keyword} !\n\nP ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...</b>")
                for file in files_media3:
                    file_ids = file.file_id
                    file_name = file.file_name
                    result = await Media4.collection.delete_one({
                        '_id': file_ids,
                    })
                    if result.deleted_count:
                        logger.info(f'F…™ ü·¥á F·¥è·¥ú…¥·¥Ö “ì·¥è Ä  è·¥è·¥ú Ä ·¥èÃ®·¥ú·¥á Ä è {keyword}! S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö {file_name} “ì Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.')
                    deleted += 1
                    if deleted % 100 == 0:
                        await query.message.edit_text(f"<b>P Ä·¥è·¥Ñ·¥áss s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö “ì·¥è Ä ·¥Ö·¥á ü·¥á·¥õ…™…¥…¢ “ì…™ ü·¥ás “ì Ä·¥è·¥ç DB. S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö {str(deleted)} “ì…™ ü·¥ás “ì Ä·¥è·¥ç DB “ì·¥è Ä  è·¥è·¥ú Ä ·¥èÃ®·¥ú·¥á Ä è {keyword} !\n\nP ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...</b>")
                # Delete files from Mediaa collection
                for file in files_media4:
                    file_ids = file.file_id
                    file_name = file.file_name
                    result = await Media5.collection.delete_one({
                        '_id': file_ids,
                    })
                    if result.deleted_count:
                        logger.info(f'F…™ ü·¥á F·¥è·¥ú…¥·¥Ö “ì·¥è Ä  è·¥è·¥ú Ä ·¥èÃ®·¥ú·¥á Ä è {keyword}! S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö {file_name} “ì Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.')
                    deleted += 1
                    if deleted % 100 == 0:
                        await query.message.edit_text(f"<b>P Ä·¥è·¥Ñ·¥áss s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö “ì·¥è Ä ·¥Ö·¥á ü·¥á·¥õ…™…¥…¢ “ì…™ ü·¥ás “ì Ä·¥è·¥ç DB. S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö {str(deleted)} “ì…™ ü·¥ás “ì Ä·¥è·¥ç DB “ì·¥è Ä  è·¥è·¥ú Ä ·¥èÃ®·¥ú·¥á Ä è {keyword} !\n\nP ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...</b>")
                # Delete files from Mediaa collection
            except Exception as e:
                logger.exception
                await query.message.edit_text(f'E Ä Ä·¥è Ä: {e}')
            else:       
                await query.message.edit_text(f"<b>P Ä·¥è·¥Ñ·¥áss C·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö “ì·¥è Ä “ì…™ ü·¥á ·¥Ö·¥á ü·¥á·¥õ…™·¥è…¥ !\n\nS·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö {str(deleted)} “ì…™ ü·¥ás “ì Ä·¥è·¥ç DB “ì·¥è Ä  è·¥è·¥ú Ä ·¥èÃ®·¥ú·¥á Ä è {keyword}.</b>")

    elif query.data == "mfna":
        await query.answer("ùë¥ùíÇùíèùíñùíÇùíç ùë≠ùíäùíçùíïùíÜùíì ùíäùíî ùë™ùíñùíìùíìùíÜùíèùíïùíçùíö ùë´ùíäùíîùíÇùíÉùíçùíÜùíÖ..!!", show_alert=True)
    
    elif query.data == "qinfo":
        await query.answer("ùëÆùíçùíêùíÉùíÇùíç ùë≠ùíäùíçùíïùíÜùíìùíî ùíäùíî ùë™ùíñùíìùíìùíÜùíèùíïùíçùíö ùë´ùíäùíîùíÇùíÉùíçùíÜùíÖ..!!", show_alert=True)
    
    elif query.data == "oooi":
        xd = query.message.reply_to_message.text.replace(" ", "+")
        btn = [[                
            InlineKeyboardButton("ùóñùóπùó∂ùó∞ùó∏ ùóõùó≤ùóøùó≤ ùóñùóºùóøùóøùó≤ùó∞ùòÅ ùó†ùóºùòÉùó∂ùó≤ ùó°ùóÆùó∫ùó≤", url=f"https://www.google.com/search?q={xd}")
            ],[   
            InlineKeyboardButton('ùñªùñ∫ùñºùóÑ', callback_data='nlang')
            ]]
        await query.message.edit_text(text=f"<u><b>ùóõùó≤ùòÜ {query.from_user.mention} üëã ùó£ùóπùó≤ùóÆùòÄùó≤ ùóôùóºùóπùóπùóºùòÑ ùóïùó≤ùóπùóºùòÑ ùó†ùóºùòÉùó∂ùó≤ùòÄ ùó¢ùóø ùó¶ùó≤ùóøùó∂ùó≤ùòÄ ùó•ùó≤ùóæùòÇùó≤ùòÄùòÅùó∂ùóªùó¥ ùó•ùòÇùóπùó≤ùòÄ</b></u>\n\nùó†ùóÆùó∏ùó≤ ùó¶ùòÇùóøùó≤ ùóßùóµùó≤ ùó†ùóºùòÉùó∂ùó≤ ùó∂ùòÄ ùó•ùó≤ùóπùó≤ùóÆùòÄùó≤ùó± ùó¢ùóª ùó¢ùóßùóß ùó£ùóπùóÆùòÅùó≥ùóºùóøùó∫ùòÄ\n\nùñ†ùóåùóÑ ùñ•ùóàùóã ùñ¢ùóàùóãùóãùñæùñºùóç ùñ≤ùóâùñæùóÖùóÖùóÇùóáùóÄ\n\nùñ¨ùóéùóåùóç ùñ¢ùóÅùñæùñºùóÑ ùñ≤ùóâùñæùóÖùóÖùóÇùóáùóÄ ùóÇùóá ùñ¶ùóàùóàùóÄùóÖùñæ \n\nùñ†ùóåùóÑ ùñ•ùóàùóã ùñ¨ùóàùóèùóÇùñæùóå ùñ®ùóá ùñ§ùóáùóÄùóÖùóÇùóåùóÅ ùñ´ùñæùóçùóçùñæùóãùóå ùñÆùóáùóÖùóí\n\nùñ£ùóàùóá'ùóç ùñ†ùóåùóÑ ùñ•ùóàùóã ùñ¥ùóáùóãùñæùóÖùñæùñ∫ùóåùñæùñΩ ùñ¨ùóàùóèùóÇùñæùóå\n\n[ùñ¨ùóàùóèùóÇùñæ ùñ≠ùñ∫ùóÜùñæ, ùñ∏ùñæùñ∫ùóã, ùñ´ùñ∫ùóáùóÄùóéùñ∫ùóÄùñæ] ùñ†ùóåùóÑ ùñ≥ùóÅùóÇùóå ùñ∂ùñ∫ùóí\n\nùñ£ùóà ùñ≠ùóàùóç ùñ¥ùóåùñæ ùñ∂ùóàùóãùñΩùóå ùñ´ùóÇùóÑùñæ ùñ£ùóéùñª, ùñ¨ùóàùóèùóÇùñæ, ùñ´ùóÇùóáùóÑ, ùñØùóÖùóåùóå, ùñ≤ùñæùóáùóç ùñæùóçùñº ùñÆùóçùóÅùñæùóã ùñ≥ùóÅùñ∫ùóá ùñ≥ùóÅùñæ ùñ∂ùñ∫ùóí ùñ¨ùñæùóáùóçùóÇùóàùóáùñæùñΩ ùñ†ùñªùóàùóèùñæ\n\nùñ£ùóàùóá'ùóç ùñ¥ùóåùñæ ùñ≤ùóçùóíùóÖùóÇùóåùóÅ ùñ•ùóàùóáùóç ùñ∂ùóÅùóÇùóÖùñæ ùñ±ùñæùóäùóéùñæùóåùóç\n\nùñ£ùóàùóá'ùóç ùñ¥ùóåùñæ ùñ≤ùóíùóÜùñªùóàùóÖùóå ùñ∂ùóÅùóÇùóÖùñæ ùñ±ùñæùóäùóéùñæùóåùóç ùñ¨ùóàùóèùóÇùñæùóå ùóÖùóÇùóÑùñæ (+:;'!-|...ùñæùóçùñº)\n\nùóúùó≥ ùòÜùóºùòÇ ùó±ùóºùóª'ùòÅ ùó¥ùó≤ùòÅ ùòÅùóµùóÆùòÅ ùó†ùóºùòÉùó∂ùó≤ùòÄ ùóºùóø ùó¶ùó≤ùóøùó∂ùó≤ùòÄ ùó≤ùòÉùó≤ùóª ùóÆùó≥ùòÅùó≤ùóø ùó≥ùóºùóπùóπùóºùòÑùó∂ùóªùó¥ ùòÅùóµùó≤ ùóøùòÇùóπùó≤ùòÄ ùóÆùóØùóºùòÉùó≤, ùòÇùóΩùóπùóºùóÆùó± ùòÅùóµùó≤ ùó∫ùóºùòÉùó∂ùó≤ ùóñùóºùóªùòÅùóÆùó∞ùòÅ - <a href=https://t.me/MCU_ADMIN_V1_BOT>ùóñùóüùóúùóñùóû ùóõùóòùó•ùóò</a>\n\n<u><b>ùñ¨ùóàùóèùóÇùñæùóå ùñ±ùñæùóäùóéùñæùóåùóçùóÇùóáùóÄ ùñ•ùóàùóãùóÜùñ∫ùóç</b></u>\nùñ™ùóéùóãùóéùóâ ùñ¨ùóàùóèùóÇùñæ‚ùå\nùñ™ùóéùóãùóéùóâ 2021 ‚úÖ\nùñ™ùóÄùñø: ùñ¢ùóÅùñ∫ùóâùóçùñæùóã 2‚ùå\nùñ™ùóÄùñø ùñ¢ùóÅùñ∫ùóâùóçùñæùóã 2‚úÖ\n\n<u><b>ùñ≤ùñæùóãùóÇùñæùóå ùñ±ùñæùóäùóéùñæùóåùóçùóÇùóáùóÄ ùñ±ùóéùóÖùñæùóå</b></u>\nùñ≤ùóçùñ∫ùóáùóÄùñæùóã ùñ≥ùóÅùóÇùóáùóÄùóå ùóåùñæùñ∫ùóåùóàùóá 1‚ùå\nùñ≤ùóçùñ∫ùóáùóÄùñæùóã ùñ≥ùóÅùóÇùóáùóÄùóå ùñ≤01‚úÖ\nùñ≤ùóçùñ∫ùóáùóÄùñæùóã ùñ≥ùóÅùóÇùóáùóÄùóå ùñ§ùóâùóÇùóåùóàùñΩùñæ 1‚ùå\nùñ≤ùóçùñ∫ùóáùóÄùñæùóã ùñ≥ùóÅùóÇùóáùóÄùóå ùñ≤01ùñ§01‚úÖ\n\n<b>üé¨‡¥´‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥Ü‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡µç ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥∂‡µç‡¥∞‡¥¶‡µç‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µá‡¥£‡µç‡¥ü‡¥§‡µç ‡¥Æ‡µÇ‡¥µ‡¥ø ‡¥®‡µÜ‡¥Ø‡¥ø‡¥Ç ‡¥Ü‡¥£‡µç ‡¥Ö‡¥§‡¥ø‡¥®‡¥æ‡¥Ø‡¥ø ‡¥§‡¥æ‡¥ï‡µç‡¥ï‡µÜ ‡¥ï‡¥æ‡¥£‡µÅ‡¥®‡µç‡¥® ‡¥¨‡¥ü‡µç‡¥ü‡µ∫ ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µã ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µç  ‡¥ó‡µÇ‡¥ó‡¥ø‡µæ ‡¥™‡µã‡¥Ø‡¥ø ‡¥®‡µÜ‡¥Ø‡¥ø‡¥Ç ‡¥∏‡µÜ‡µº‡¥ö‡µç‡¥ö‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§ ‡¥ï‡¥±‡¥ï‡µç‡¥±‡µç‡¥±‡µç ‡¥Æ‡µÇ‡¥µ‡¥ø ‡¥®‡µÜ‡¥Ø‡¥ø‡¥Ç ‡¥ï‡µã‡¥™‡µç‡¥™‡¥ø ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡¥ø‡¥ü‡µç‡¥ü‡µç ‡¥ó‡µç‡¥∞‡µÇ‡¥™‡µç‡¥™‡µç ‡µΩ ‡¥á‡¥ü‡µç‡¥ü‡¥æ‡µΩ ‡¥ï‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥Çü§ç\n\nüí°‡¥Æ‡µÅ‡¥ï‡¥≥‡¥ø‡µΩ ‡¥â‡¥≥‡µç‡¥≥ ‡¥ï‡¥æ‡¥∞‡µç‡¥Ø‡¥ô‡µç‡¥ô‡µæ ‡¥´‡µã‡¥≥‡µã ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥Ç ‡¥Æ‡µÇ‡¥µ‡¥ø ‡¥ï‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥®‡µç‡¥®‡¥ø‡¥≤‡µç‡¥≤ ‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡¥ø‡µΩ ‡¥Æ‡µÇ‡¥µ‡¥ø üëâ<a href=https://t.me/MCU_ADMIN_V1_BOT>ùó†ùó¶ùóö ùóõùóòùó•ùóò</a> msg ‡¥Ö‡¥Ø‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ‡¥ï 30 min ‡¥∂‡µá‡¥∑‡¥Ç ‡¥Æ‡µÇ‡¥µ‡¥ø ‡¥¨‡µã‡¥ü‡µç‡¥ü‡µç ‡¥á‡µΩ ‡¥Ö‡¥™‡µç‡¥≤‡µã‡¥°‡µç ‡¥Ü‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡¥æ‡¥£‡µç üéâ</b>", reply_markup=InlineKeyboardMarkup(btn))
 
        
    elif query.data.startswith("send_fall"):
        temp_var, userid = query.data.split("#")
        if int(query.from_user.id) not in [query.message.reply_to_message.from_user.id, 0]:
            return await query.answer("This is not Your Request üö´\n\nDo Search your own ‚úÖ", show_alert=True)
        files = temp.SEND_ALL_TEMP.get(userid)
        is_over = await send_all(client, query.from_user.id, files)
        if is_over == 'done':
            return await query.answer(f"H·¥á è {query.from_user.first_name}, A ü ü “ì…™ ü·¥ás ·¥è…¥ ·¥õ ú…™s ·¥ò·¥Ä…¢·¥á  ú·¥Äs  ô·¥á·¥á…¥ s·¥á…¥·¥õ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥õ·¥è  è·¥è·¥ú Ä PM !", show_alert=True)
        elif is_over == 'fal':
            file_id = "none"
            return await query.answer(url=f"https://t.me/{temp.U_NAME}?start={userid}_{file_id}")
        else:
            return await query.answer(f"E Ä Ä·¥è Ä: {is_over}", show_alert=True)
            

        
    elif query.data == "pages":
        await query.answer()
    elif query.data == "start":
        buttons = [[
            InlineKeyboardButton('√ó ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥òs √ó', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
            ],[
            InlineKeyboardButton('·¥ç è …¢ Ä·¥è·¥ú·¥ò', url='https://t.me/+JQeou0PAx_Y0ZGFl'),
            InlineKeyboardButton('·¥ç è ·¥è·¥°…¥·¥á Ä', url='https://t.me/PowerOfTG')
            ],[
            InlineKeyboardButton(' ú·¥á ü·¥ò', callback_data='botinfo'),            
            InlineKeyboardButton('·¥Ä ô·¥è·¥ú·¥õ', callback_data='about')  
            ],[
            InlineKeyboardButton('·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á üs  ü…™…¥·¥ãs', url='https://t.me/UrvashiTheaters_Main')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.START_TXT.format(query.from_user.mention, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        await query.answer('Piracy Is Crime')    
    elif query.data == "commun":
        buttons = [[
            InlineKeyboardButton("üë• ùóöùó•ùó¢ùó®ùó£ - ùü≠", url=f"https://t.me/+nqLSf7SMZA5mOWQ1"),
            InlineKeyboardButton("üë• ùóöùó•ùó¢ùó®ùó£ - ùüÆ", url=f"https://t.me/+mVb73DEYBdg1N2Rl")
            ],[
            InlineKeyboardButton("üë• ùóöùó•ùó¢ùó®ùó£ - ùüØ", url=f"https://t.me/+CCe4OvJnSmU0NDk1"),
            InlineKeyboardButton("üë• ùóöùó•ùó¢ùó®ùó£ - ùü∞", url=f"https://t.me/+4JBrlO2UZwozZWE1")  
            ],[
            InlineKeyboardButton("üñ• ùó°ùóòùó™ ùó¢ùóßùóß ùó®ùó£ùóóùóîùóßùóòùó¶ üñ•", url="https://t.me/+WgmakVHYWL01MmY1")
            ],[
            InlineKeyboardButton("üñ• ùêéùêìùêì ùêàùêçùêíùêìùêÜùêëùêÄùêå üñ•", url='https://www.instagram.com/new_ott__updates?igsh=MTMxcmhwamF4eGp6eg==')                  
            ],[       
            InlineKeyboardButton('ü™¨  ú·¥è·¥ç·¥á ü™¨', callback_data='start'),
            InlineKeyboardButton('üó£ ·¥Ä·¥Ö·¥ç…™…¥', url=f"https://t.me/MCU_ADMIN_V1_BOT" )
            ],[
            InlineKeyboardButton('ü§∑‚Äç‚ôÇÔ∏è ùêáùêéùêñ ùêìùêé ùêëùêÑùêêùêîùêÑùêíùêì ùêåùêéùêïùêàùêÑùêí ü§∑üèª', callback_data='movereq'),
        
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)          
        await query.message.edit_text(
            text=script.COMMUN_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "movedow":
        buttons = [[
            InlineKeyboardButton("üë• ùêëùêûùê™ùêÆùêûùê¨ùê≠ ùêÜùê´ùê®ùêÆùê©", url=f"https://t.me/+nqLSf7SMZA5mOWQ1"),
            InlineKeyboardButton('‚¨ÖÔ∏è  ô·¥Ä·¥Ñ·¥ã', callback_data='help')
        ]]        
        reply_markup = InlineKeyboardMarkup(buttons)        
        await query.message.edit_text(
            text=script.MOVDOW_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        
    elif query.data == "machu":
        if query.from_user.id not in ADMINS:
            await query.answer("‡¥Æ‡µã‡¥®‡µÜ ‡¥Ö‡¥§‡µç ‡¥≤‡µã‡¥ï‡µç‡¥ï‡¥æ ‚ùå", show_alert=True)
            return
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='start')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)        
        await query.message.edit_text(
            text=script.MCAHU_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        
    elif query.data == "movereqs":
        buttons = [[
            InlineKeyboardButton("üë• ùêëùêûùê™ùêÆùêûùê¨ùê≠ ùêÜùê´ùê®ùêÆùê©", url=f"https://t.me/+nqLSf7SMZA5mOWQ1"),
            InlineKeyboardButton('‚¨ÖÔ∏è  ô·¥Ä·¥Ñ·¥ã', callback_data='help')
        ]]        
        reply_markup = InlineKeyboardMarkup(buttons)        
        await query.message.edit_text(
            text=script.MOVREQ_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )

    elif query.data == "movereq":
        buttons = [[
            InlineKeyboardButton("üë• ùêëùêûùê™ùêÆùêûùê¨ùê≠ ùêÜùê´ùê®ùêÆùê©", url=f"https://t.me/+nqLSf7SMZA5mOWQ1"),
            InlineKeyboardButton('‚¨ÖÔ∏è  ô·¥Ä·¥Ñ·¥ã', callback_data='commun')
        ]]        
        reply_markup = InlineKeyboardMarkup(buttons)        
        await query.message.edit_text(
            text=script.MOVREQ_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    
    elif query.data == "help":
        buttons = [[
            InlineKeyboardButton('üïπ ùë¥ùíÇùíèùíñùíÇùíç ùë≠ùíäùíçùíïùíÜùíì', 'mfna'),
            InlineKeyboardButton('üåè ùëÆùíçùíêùíÉùíÇùíç ùë≠ùíäùíçùíïùíÜùíìùíî', 'qinfo'),
            InlineKeyboardButton('ùë®ùíñùíïùíê ùíáùíäùíçùíïùíÜùíì üì•', callback_data='autofilter')                   
            ],[
            InlineKeyboardButton('ü§∑‚Äç‚ôÇÔ∏è ùêáùêéùêñ ùêìùêé ùêëùêÑùêêùêîùêÑùêíùêì ü§∑üèª', callback_data='movereqs')
            ],[
            InlineKeyboardButton('ü§∑‚Äç‚ôÇÔ∏è ùêáùêéùêñ ùêìùêé ùêÉùêéùêñùêçùêãùêéùêÄùêÉ ü§∑üèª', callback_data='movedow')           
            ],[
            InlineKeyboardButton('‚¨ÖÔ∏è  ô·¥Ä·¥Ñ·¥ã', callback_data='start'),
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)           
        await query.message.edit_text(
            text=script.HELP_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "botinfo":
        buttons = [[                             
            InlineKeyboardButton('s·¥õ·¥Ä·¥õ·¥ús', callback_data='stats'),
            InlineKeyboardButton('s·¥è·¥ú Ä·¥Ñ·¥á', callback_data='sorce')
            ],[
            InlineKeyboardButton("·¥Ä·¥Ö·¥ç…™…¥", url=f"https://t.me/PowerOfTG" ),
            InlineKeyboardButton(' ú·¥è·¥ç·¥á', callback_data='start')                                  
        ]]        
        reply_markup = InlineKeyboardMarkup(buttons)        
        await query.message.edit_text(
            text=script.BOTINFO_TXT.format(temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "about":
        buttons = [[            
            InlineKeyboardButton(' ú·¥è·¥ç·¥á', callback_data='start')                                          
        ]]        
        reply_markup = InlineKeyboardMarkup(buttons)        
        await query.message.edit_text(
            text=script.ABOUT_TXT.format(temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )        
    elif query.data == "sorce":
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='botinfo')
        ]]        
        reply_markup = InlineKeyboardMarkup(buttons)        
        await query.message.edit_text(
            text=script.SORCE_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "autofilter":
        buttons = [[
            InlineKeyboardButton('‚¨ÖÔ∏è  ô·¥Ä·¥Ñ·¥ã', callback_data='help')
        ]]        
        reply_markup = InlineKeyboardMarkup(buttons)       
        await query.message.edit_text(
            text=script.AUTOFILTER_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )                 
    elif query.data == "stats":
        await query.message.edit_text("·¥°·¥Ä…™·¥õ.....")
        buttons = [[
            InlineKeyboardButton(' ô·¥Ä·¥Ñ·¥ã', callback_data='botinfo'),            
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        tot1 = await Media2.count_documents()
        tot2 = await Media3.count_documents()
        tot3 = await Media4.count_documents()
        tot4 = await Media5.count_documents()
        total = tot1 + tot2 + tot3 + tot4
        users = await db.total_users_count()
        chats = await db.total_chat_count()
        stats = await clientDB.command('dbStats')
        used_dbSize = (stats['dataSize']/(1024*1024))+(stats['indexSize']/(1024*1024))        
        stats2 = await clientDB2.command('dbStats')
        used_dbSize2 = (stats2['dataSize']/(1024*1024))+(stats2['indexSize']/(1024*1024))
        stats3 = await clientDB3.command('dbStats')
        used_dbSize3 = (stats3['dataSize']/(1024*1024))+(stats3['indexSize']/(1024*1024))  
        stats4 = await clientDB4.command('dbStats')
        used_dbSize4 = (stats4['dataSize']/(1024*1024))+(stats4['indexSize']/(1024*1024))  
        stats5 = await clientDB5.command('dbStats')
        used_dbSize5 = (stats5['dataSize']/(1024*1024))+(stats5['indexSize']/(1024*1024))  
        await query.message.edit_text(
            text=script.STATUS_TXT.format(total, users, chats, round(used_dbSize, 2), tot1, round(used_dbSize2, 2), tot2, round(used_dbSize3, 2), tot3, round(used_dbSize4, 2), tot4, round(used_dbSize5, 2)),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        if query.from_user.id in ADMINS:
            await query.message.edit_text(text=script.STATUS_TXT.format(total, users, chats, monsize, free), reply_markup=reply_markup, parse_mode=enums.ParseMode.HTML)
        else:
            await query.answer("‚ö† …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ‚ö†\n\nI·¥õÍú± ·¥è…¥ ü è “ì·¥è Ä ·¥ç è ADMINS\n\n¬© [MCU] MOVIES", show_alert=True)
            await query.message.edit_text(text="‡¥Ö‡¥°‡µç‡¥Æ‡¥ø‡µª‡¥∏‡¥ø‡¥®‡µç ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Æ‡µá ‡¥ï‡¥æ‡¥£‡¥æ‡µª ‡¥™‡¥±‡µç‡¥±‡µÅ‡¥ï‡¥Ø‡µÅ‡¥≥‡µç‡¥≥‡µÇ.. ü§ó", reply_markup=reply_markup)

    elif query.data == "eng":
       xd = query.message.reply_to_message.text.replace(" ", "+")
       btn = [
           [
               InlineKeyboardButton("Search on Google", url=f"https://www.google.com/search?q={xd}"),
               InlineKeyboardButton("back", callback_data="nlang")
           ]
       ]
       await query.message.edit_text(text=f"Hey {query.from_user.mention} üëã<b><u> If you want to get the movie, follow the below‚Ä¶</u>üëá\n\n<i>üîπAsk for correct spelling. (English Letters)\n\nüî∏Ask for movies in English Lettes only.\n\nüîπDon't ask for unreleased movies.\n\nüî∏ [Movie Name, Year, Language] Ask this way.\n\nüîπ Don't Use symbols while requesting movies. (+:;'!-`|...etc)\n\nüåè Use the Google Button below for your movie details\n\nüìå ùóîùóªùòÜ ùóõùó≤ùóπùóΩ ùó£ùóπùó≤ùóÆùòÄùó≤ ùóñùóºùóªùòÅùóÆùó∞ùòÅ ùóîùó±ùó∫ùó∂ùóª : @MCU_ADMIN_V1_BOT</b></i>", reply_markup=InlineKeyboardMarkup(btn))    

    elif query.data == "mal":
       xd = query.message.reply_to_message.text.replace(" ", "+")
       btn = [
           [
               InlineKeyboardButton("Search on Google", url=f"https://www.google.com/search?q={xd}"),
               InlineKeyboardButton("back", callback_data="nlang")
           ]
       ]
       await query.message.edit_text(text=f"Hey {query.from_user.mention}üëã <b><u>‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ ‡¥ï‡¥ø‡¥ü‡µç‡¥ü‡¥£‡¥Æ‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ, ‡¥§‡¥æ‡¥¥‡µÜ ‡¥™‡¥±‡¥Ø‡µÅ‡¥®‡µç‡¥® ‡¥ï‡¥æ‡¥∞‡µç‡¥Ø‡¥ô‡µç‡¥ô‡¥≥‡¥ø‡µΩ ‡¥∂‡µç‡¥∞‡¥¶‡µç‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï...üëá</u><I>\n\nüîπ‡¥ï‡¥±‡¥ï‡µç‡¥±‡µç‡¥±‡µç ‡¥∏‡µç‡¥™‡µÜ‡¥≤‡µç‡¥≤‡¥ø‡¥Ç‡¥ó‡¥ø‡µΩ ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. (‡¥á‡¥Ç‡¥ó‡µç‡¥≤‡µÄ‡¥∑‡¥ø‡µΩ ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Ç)\n\nüî∏‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ‡¥ï‡µæ ‡¥á‡¥Ç‡¥ó‡µç‡¥≤‡µÄ‡¥∑‡¥ø‡µΩ Type ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µç ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Ç ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.\n\nüîπ‡¥±‡¥ø‡¥≤‡µÄ‡¥∏‡µç ‡¥Ü‡¥ï‡¥æ‡¥§‡µç‡¥§ ‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ‡¥ï‡µæ ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡¥∞‡µÅ‡¥§‡µç.\n\nüî∏[‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥™‡µá‡¥∞‡µç, ‡¥µ‡µº‡¥∑‡¥Ç, ‡¥≠‡¥æ‡¥∑] ‡¥à ‡¥∞‡µÄ‡¥§‡¥ø‡¥Ø‡¥ø‡µΩ ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.\n\nüîπ‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ Request ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ Symbols ‡¥í‡¥¥‡¥ø‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï. [+:;'*!-`&.. etc]\n\nüåè ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ ‡¥µ‡¥ø‡¥∂‡¥¶‡¥æ‡¥Ç‡¥∂‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡¥æ‡¥Ø‡¥ø ‡¥ö‡µÅ‡¥µ‡¥ü‡µÜ‡¥Ø‡µÅ‡¥≥‡µç‡¥≥ ‡¥ó‡µÇ‡¥ó‡¥ø‡µæ ‡¥¨‡¥ü‡µç‡¥ü‡µ∫ ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï\n\nüìå ‡¥é‡¥®‡µç‡¥§‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡¥≤‡µÅ‡¥Ç ‡¥∏‡¥π‡¥æ‡¥Ø‡¥Ç ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥Ö‡¥°‡µç‡¥Æ‡¥ø‡¥®‡µÜ ‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥ï : @MCU_ADMIN_V1_BOT</b></i>", reply_markup=InlineKeyboardMarkup(btn))

    elif query.data == "tam":
       xd = query.message.reply_to_message.text.replace(" ", "+")
       btn = [
           [
               InlineKeyboardButton("Search on Google", url=f"https://www.google.com/search?q={xd}"),
               InlineKeyboardButton("back", callback_data="nlang")
           ]
       ]    
       await query.message.edit_text(text=f"Hey {query.from_user.mention}üëã <b><u>‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ§‡Æø‡Æ∞‡Øà‡Æ™‡Øç‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡Øà‡Æ™‡Øç ‡Æ™‡ØÜ‡Æ± ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡Æø‡Æ©‡Ææ‡Æ≤‡Øç, ‡Æï‡ØÄ‡Æ¥‡Øá ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡ØÅ‡Æ≥‡Øç‡Æ≥ ‡Æµ‡Æø‡Æ∑‡ÆØ‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡Æø‡Æ©‡Øç‡Æ™‡Æ±‡Øç‡Æ±‡Æµ‡ØÅ‡ÆÆ‡Øç...üëá</u><i>\n\nüîπ‡Æö‡Æ∞‡Æø‡ÆØ‡Ææ‡Æ© ‡Æé‡Æ¥‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æ™‡Øç‡Æ™‡Æø‡Æ¥‡Øà ‡Æï‡Øá‡Æü‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç. (‡ÆÜ‡Æô‡Øç‡Æï‡Æø‡Æ≤‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç)\n\nüî∏‡Æ§‡Æø‡Æ∞‡Øà‡Æ™‡Øç‡Æ™‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡ÆÜ‡Æô‡Øç‡Æï‡Æø‡Æ≤‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æü‡Øà‡Æ™‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡Æï‡Øá‡Æü‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.\n\nüîπ‡Æµ‡ØÜ‡Æ≥‡Æø‡ÆØ‡Ææ‡Æ§ ‡Æ§‡Æø‡Æ∞‡Øà‡Æ™‡Øç‡Æ™‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Øá‡Æü‡Øç‡Æï‡Ææ‡Æ§‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç.\n\nüî∏ [‡Æ§‡Æø‡Æ∞‡Øà‡Æ™‡Øç‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ©‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç, ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ, ‡ÆÆ‡Øä‡Æ¥‡Æø] ‡Æá‡Æ®‡Øç‡Æ§ ‡Æµ‡Æ¥‡Æø‡ÆØ‡Æø‡Æ≤‡Øç ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.\n\nüîπ‡Æ§‡Æø‡Æ∞‡Øà‡Æ™‡Øç‡Æ™‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Øã‡Æ∞‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Øã‡Æ§‡ØÅ ‡Æö‡Æø‡Æ©‡Øç‡Æ©‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æ§‡Øç ‡Æ§‡Æµ‡Æø‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç. [+:;'*!-&.. etc]\n\nüåé ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ§‡Æø‡Æ∞‡Øà‡Æ™‡Øç‡Æ™‡Æü ‡Æµ‡Æø‡Æµ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æï‡ØÄ‡Æ¥‡Øá ‡Æâ‡Æ≥‡Øç‡Æ≥ Google ‡Æ™‡Æü‡Øç‡Æü‡Æ©‡Øà‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç\n\nüìå ‡Æè‡Æ§‡Øá‡Æ©‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æ§‡Æµ‡Æø ‡Æá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡Ææ‡Æ≤‡Øç ‡Æ®‡Æø‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥‡Æµ‡ØÅ‡ÆÆ‡Øç : @MCU_ADMIN_V1_BOT</b></i>", reply_markup=InlineKeyboardMarkup(btn))
     
    elif query.data == "tel":
       xd = query.message.reply_to_message.text.replace(" ", "+")
       btn = [
           [
               InlineKeyboardButton("Search on Google", url=f"https://www.google.com/search?q={xd}"),
               InlineKeyboardButton("back", callback_data="nlang")
           ]
       ]
       await query.message.edit_text(text=f"Hey {query.from_user.mention}üëã <b><u>‡∞∞‡±Å ‡∞∏‡∞ø‡∞®‡∞ø‡∞Æ‡∞æ‡∞®‡∞ø ‡∞™‡±ä‡∞Ç‡∞¶‡∞æ‡∞≤‡∞®‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±á, ‡∞ï‡±ç‡∞∞‡∞ø‡∞Ç‡∞¶ ‡∞™‡±á‡∞∞‡±ç‡∞ï‡±ä‡∞®‡±ç‡∞® ‡∞µ‡∞ø‡∞∑‡∞Ø‡∞æ‡∞≤‡∞®‡±Å ‡∞Ö‡∞®‡±Å‡∞∏‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø...üëá</u><i>\n\nüîπ‡∞∏‡∞∞‡±à‡∞® ‡∞∏‡±ç‡∞™‡±Ü‡∞≤‡±ç‡∞≤‡∞ø‡∞Ç‡∞ó‡±ç ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø. (‡∞á‡∞Ç‡∞ó‡±ç‡∞≤‡±Ä‡∞∑‡±ç‚Äå‡∞≤‡±ã ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á)\n\nüî∏‡∞∏‡∞ø‡∞®‡∞ø‡∞Æ‡∞æ‡∞≤‡∞®‡±Å ‡∞Ü‡∞Ç‡∞ó‡±ç‡∞≤‡∞Ç‡∞≤‡±ã ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø.\n\nüîπ‡∞µ‡∞ø‡∞°‡±Å‡∞¶‡∞≤ ‡∞ï‡∞æ‡∞®‡∞ø ‡∞∏‡∞ø‡∞®‡∞ø‡∞Æ‡∞æ‡∞≤‡∞®‡±Å ‡∞Ö‡∞°‡∞ó‡∞µ‡∞¶‡±ç‡∞¶‡±Å.\n\nüî∏ [‡∞∏‡∞ø‡∞®‡∞ø‡∞Æ‡∞æ ‡∞™‡±á‡∞∞‡±Å, ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞Ç, ‡∞≠‡∞æ‡∞∑] ‡∞à ‡∞µ‡∞ø‡∞ß‡∞Ç‡∞ó‡∞æ ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø.\n\nüîπ‡∞∏‡∞ø‡∞®‡∞ø‡∞Æ‡∞æ‡∞≤‡∞®‡±Å ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞ø‡∞Ç‡∞ö‡±á‡∞ü‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞ö‡∞ø‡∞π‡±ç‡∞®‡∞æ‡∞≤‡∞®‡±Å ‡∞®‡∞ø‡∞µ‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø. [+:;'*!-&.. etc]\n\nüåé ‡∞Æ‡±Ä ‡∞∏‡∞ø‡∞®‡∞ø‡∞Æ‡∞æ ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤ ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞¶‡∞ø‡∞ó‡±Å‡∞µ‡∞® ‡∞â‡∞®‡±ç‡∞® Google ‡∞¨‡∞ü‡∞®‡±ç‚Äå‡∞®‡∞ø ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø\n\nüìå ‡∞è‡∞¶‡±à‡∞®‡∞æ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞®‡∞ø‡∞∞‡±ç‡∞µ‡∞æ‡∞π‡∞ï‡±Å‡∞°‡∞ø‡∞®‡∞ø ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø : @MCU_ADMIN_V1_BOT</b></i>", reply_markup=InlineKeyboardMarkup(btn))

    elif query.data == "hin":
       xd = query.message.reply_to_message.text.replace(" ", "+")
       btn = [
           [
               InlineKeyboardButton("Search on Google", url=f"https://www.google.com/search?q={xd}"),
               InlineKeyboardButton("back", callback_data="nlang")
           ]
       ]
       await query.message.edit_text(text=f"Hey {query.from_user.mention}üëã <b><u>‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§Æ‡•Ç‡§µ‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§ö‡§∞‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡•á‡§Ç...</u><i>üëá\n\nüîπ‡§∏‡§π‡•Ä ‡§µ‡§∞‡•ç‡§§‡§®‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§ (‡§ï‡•á‡§µ‡§≤ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡§º‡•Ä ‡§Æ‡•á‡§Ç)\n\nüî∏‡§´‡§ø‡§≤‡•ç‡§Æ‡•á‡§Ç ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ï‡•á‡§µ‡§≤ ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§\n\nüîπ‡§Ö‡§™‡•ç‡§∞‡§ï‡§æ‡§∂‡§ø‡§§ ‡§´‡§ø‡§≤‡•ç‡§Æ‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§\n\nüî∏ [‡§Æ‡•Ç‡§µ‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ, ‡§µ‡§∞‡•ç‡§∑, ‡§≠‡§æ‡§∑‡§æ] ‡§á‡§∏ ‡§§‡§∞‡§π ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§\n\nüîπ‡§´‡§ø‡§≤‡•ç‡§Æ‡•ã‡§Ç ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç‡•§ [+:;'*!-&.. ‡§Ü‡§¶‡§ø]\n\nüåé‡§Ö‡§™‡§®‡•Ä ‡§Æ‡•Ç‡§µ‡•Ä ‡§ï‡•á ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è Google ‡§¨‡§ü‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\n\nüìå ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§ï ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç : @MCU_ADMIN_V1_BOT</b></i>", reply_markup=InlineKeyboardMarkup(btn))
    elif query.data == "nlang":
       xd = query.message.reply_to_message.text.replace(" ", "+")  
       btn_duction = InlineKeyboardButton("ùñ¨ùóéùóåùóç ùñ±ùñæùñ∫ùñΩ", callback_data="endio")
       btn_ductior = InlineKeyboardButton("ùñ±ùóéùóÖùñæùóå", callback_data="oooi")  
       btn_dadduco = InlineKeyboardButton("ùñ•ùóàùóãùóÜùñ∫ùóç", callback_data="minfo")
        
       intro_row = [btn_duction, btn_ductior, btn_dadduco]
       btn_eng = InlineKeyboardButton("·¥á…¥…¢", callback_data="eng")
       btn_mal = InlineKeyboardButton("·¥ç·¥Ä ü", callback_data="mal")
       btn_hin = InlineKeyboardButton(" ú…™…¥", callback_data="hin")
       btn_tam = InlineKeyboardButton("·¥õ·¥Ä·¥ç", callback_data="tam")
       btn_tel = InlineKeyboardButton("·¥õ·¥á ü", callback_data="tel")

       language_row = [btn_eng, btn_mal, btn_hin, btn_tam, btn_tel]
       btn_google = InlineKeyboardButton("ùóñùóºùóøùóøùó≤ùó∞ùòÅ ùó¶ùóΩùó≤ùóπùóπùó∂ùóªùó¥ (ùóÄùóàùóàùóÄùóÖùñæ)", url=f"https://www.google.com/search?q={xd}")

       google_row = [btn_google]

       keyboard = InlineKeyboardMarkup(inline_keyboard=[intro_row, language_row, google_row])
 
       await query.message.edit_text(text=f"<b>‚ùù ùñßùñæùóí {query.from_user.mention} ùóåùóàùóÜùñæùóçùóÅùóÇùóáùóÄ ùñ®ùóå ùñ∂ùóãùóàùóáùóÄ ‚ùû\n\n‚û™ ùñ¢ùóàùóãùóãùñæùñºùóç ùñ≤ùóâùñæùóÖùóÖùóÇùóáùóÄ ùñÆùñø ùñ¨ùóàùóèùóÇùñæ <u>ùñ¢ùóÅùñæùñºùóÑ ùñ¢ùóàùóãùóãùñæùñºùóç ùñ≤ùóâùñæùóÖùóÖùóÇùóáùóÄ (ùóÄùóàùóàùóÄùóÖùñæ)</u> ùñ°ùóéùóçùóçùóàùóá ùñ°ùñæùóÖùóàùóê ùñ∂ùóÇùóÖùóÖ ùñßùñæùóÖùóâ ùñ∏ùóàùóé..ìÅâ\n\n‚û™ ùñ≤ùñæùóÖùñæùñºùóç ùñ∏ùóàùóéùóã ùñ´ùñ∫ùóáùóÄùñ∫ùóéùóÄùñæ ùñ•ùóãùóàùóÜ ùñ≥ùóÅùñæ ùñ´ùóÇùóåùóç ùñ°ùñæùóÖùóàùóê ùñ≥ùóà ùñ¨ùóàùóãùñæ ùñßùñæùóÖùóâ..‚òÉÔ∏é</b>", reply_markup=keyboard)
         
    elif query.data == "minfo":
       await query.answer(
       text=(
            "ü•áùêÜùê® ùêìùê® ùêÜùê®ùê®ùê†ùê•ùêû ùêÇùê®ùê©ùê≤ ùêÇùê®ùê´ùê´ùêûùêúùê≠ ùêíùê©ùêûùê•ùê•ùê¢ùêßùê† ùê¢ùêß ùó¢ùóªùóπùòÜ ùóòùóªùó¥ùóπùó∂ùòÄùóµ ùóüùó≤ùòÅùòÅùó≤ùóøùòÄ ùêÄùêßùêù ùêíùêûùêßùê≠ ùê¢ùê≠üéØ\n\n"
            "ùêëùêûùê™ùêÆùêûùê¨ùê≠ ùêÖùê®ùê´ùê¶ùêöùê≠:-\n"
            "Movies - Varisu 2023\n"
            "Series - Dark S01E01\n\n"
            "ùó†ùóºùóøùó≤ ùóúùóªùó≥ùóºùóøùó∫ùóÆùòÅùó∂ùóºùóª :- ùñ¢ùóÖùóÇùñºùóÑ ùñÆùóá ùñ≥ùóÅùñæ ùñ°ùóéùóçùóçùóàùóá ùñ®ùóá ùñ∏ùóàùóéùóã ùñ´ùñ∫ùóáùóÄùóéùñ∫ùóÄùñæ ùñªùñæùóÖùóàùóêü™ù"
        ),
        show_alert=True
    )
    elif query.data == "endio": 
       await query.answer(f"‡¥ï‡¥ø‡¥ü‡µç‡¥ü‡µã.. ‡¥â‡¥£‡µç‡¥ü‡µã.. ‡¥§‡¥∞‡µÅ‡¥Æ‡µã.‡¥Ö‡¥Ø‡¥ï‡µç‡¥ï‡¥æ‡¥Æ‡µã. sent. ‡¥≤‡¥ø‡¥ô‡µç‡¥ï‡µç.. Plz. Movie... ‡¥é‡¥®‡µç‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥â‡¥≥‡µç‡¥≥ ‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡µæ ‡¥í‡¥¥‡¥ø‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥Æ‡µÇ‡¥µ‡¥ø‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥™‡µá‡¥∞‡µç ‡¥µ‡µº‡¥∑‡¥Ç ‡¥≠‡¥æ‡¥∑‚úçÔ∏è. ‡¥µ‡µá‡¥±‡µá ‡¥í‡¥®‡µç‡¥®‡µÅ‡¥Ç ‡¥ï‡µÇ‡¥ü‡µç‡¥ü‡¥ø ‡¥é‡¥¥‡µÅ‡¥§‡¥∞‡µÅ‡¥§‡µç.üîé",show_alert=True)

    elif query.data.startswith("setgs"):
        ident, set_type, status, grp_id = query.data.split("#")
        grpid = await active_connection(str(query.from_user.id))

        if str(grp_id) != str(grpid):
            await query.message.edit("Your Active Connection Has Been Changed. Go To /settings.")
            return await query.answer('Piracy Is Crime')

        if status == "True":
            await save_group_settings(grpid, set_type, False)
        else:
            await save_group_settings(grpid, set_type, True)

        settings = await get_settings(grpid)

        if settings is not None:
            buttons = [
                [
                    InlineKeyboardButton('Filter Button',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}'),
                    InlineKeyboardButton('Single' if settings["button"] else 'Double',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Bot PM', callback_data=f'setgs#botpm#{settings["botpm"]}#{str(grp_id)}'),
                    InlineKeyboardButton('‚úÖ Yes' if settings["botpm"] else '‚ùå No',
                                         callback_data=f'setgs#botpm#{settings["botpm"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('File Secure',
                                         callback_data=f'setgs#file_secure#{settings["file_secure"]}#{str(grp_id)}'),
                    InlineKeyboardButton('‚úÖ Yes' if settings["file_secure"] else '‚ùå No',
                                         callback_data=f'setgs#file_secure#{settings["file_secure"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('IMDB', callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}'),
                    InlineKeyboardButton('‚úÖ Yes' if settings["imdb"] else '‚ùå No',
                                         callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Spell Check',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}'),
                    InlineKeyboardButton('‚úÖ Yes' if settings["spell_check"] else '‚ùå No',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Welcome', callback_data=f'setgs#welcome#{settings["welcome"]}#{str(grp_id)}'),
                    InlineKeyboardButton('‚úÖ Yes' if settings["welcome"] else '‚ùå No',
                                         callback_data=f'setgs#welcome#{settings["welcome"]}#{str(grp_id)}')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_reply_markup(reply_markup)
    await query.answer('Piracy Is Crime')

async def auto_filter(client, msg, spoll=False):
    if not spoll:
        message = msg
        matrix = msg.text
        settings = await get_settings(message.chat.id)
        if matrix.startswith("/") or matrix.startswith("#"): return  # ignore commands
        if re.findall("((^\/|^,|^!|^\.|^[\U0001F600-\U000E007F]).*)", message.text):
            return
        if 2 < len(message.text) < 100:
            search = message.text
            files, offset, total_results = await get_search_results(search.lower(), offset=0, filter=True)
            if not files:
                if settings["spell_check"]:
                    return await advantage_spell_chok(client, msg)
                else:
                    return
        else:
            return
    else:
        settings = await get_settings(msg.message.chat.id)
        message = msg.message.reply_to_message  # msg will be callback query
        search, files, offset, total_results = spoll
    pre = 'filep' if settings['file_secure'] else 'file'
    key = f"{message.chat.id}-{message.id}"
    temp.SEND_ALL_TEMP[key] = files
    if settings['button']:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"[{get_size(file.file_size)}] {file.file_name}", callback_data=f'files#{file.file_id}'
                ),
            ]
            for file in files
        ]
        btn.insert(0, 
            [ 
                InlineKeyboardButton(f'Q·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton("L·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("S·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{file.file_name}", callback_data=f'files#{file.file_id}'
                ),
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)}",
                    callback_data=f'files_#{file.file_id}',
                ),
            ]
            for file in files
        ]
        btn.insert(0, 
            [ 
                InlineKeyboardButton(f'Q·¥ú·¥Ä ü…™·¥õ è', callback_data=f"qualities#{key}"),
                InlineKeyboardButton("L·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á", callback_data=f"languages#{key}"),
                InlineKeyboardButton("S·¥á·¥Äs·¥è…¥",  callback_data=f"seasons#{key}")
            ]
        )
    
    if offset != "":
        key = f"{message.chat.id}-{message.id}"
        BUTTONS[key] = search
        req = message.from_user.id if message.from_user else 0
        btn.append(
            [InlineKeyboardButton(text=f"·¥ò·¥Ä…¢·¥á 1/{math.ceil(int(total_results) / 10)}", callback_data="pages"),
            InlineKeyboardButton(text="…¥·¥áx·¥õ", callback_data=f"next_{req}_{key}_{offset}")]
       )        
    imdb = await get_poster(search, file=(files[0]).file_name) if settings["imdb"] else None
    TEMPLATE = settings['template']
    if imdb:
        cap = TEMPLATE.format(
            query=search,
            title=imdb['title'],
            votes=imdb['votes'],
            aka=imdb["aka"],
            seasons=imdb["seasons"],
            box_office=imdb['box_office'],
            localized_title=imdb['localized_title'],
            kind=imdb['kind'],
            imdb_id=imdb["imdb_id"],
            cast=imdb["cast"],
            runtime=imdb["runtime"],
            countries=imdb["countries"],
            certificates=imdb["certificates"],
            languages=imdb["languages"],
            director=imdb["director"],
            writer=imdb["writer"],
            producer=imdb["producer"],
            composer=imdb["composer"],
            cinematographer=imdb["cinematographer"],
            music_team=imdb["music_team"],
            distributors=imdb["distributors"],
            release_date=imdb['release_date'],
            year=imdb['year'],
            genres=imdb['genres'],
            poster=imdb['poster'],
            plot=imdb['plot'],
            rating=imdb['rating'],
            url=imdb['url'],
            **locals()
        )
    else:
        cap = f"<b><i><blockquote>‚ñ∫Film : {search}\n‚ñ∫Rating : {random.choice(RATING)}\n‚ñ∫Genre : {random.choice(GENRES)}\n‚ñ∫Result : {total_results}</i></blockquote></b>\n\n<b><i>¬©ùêìùêûùêöùê¶ ùêîùê´ùêØùêöùê¨ùê°ùê¢ ùêìùê°ùêûùêöùê≠ùêûùê´ùê¨‚Ñ¢Ô∏è</i></b>"         
    if imdb and imdb.get('poster'):
        try:
            mat = await message.reply_photo(photo=imdb.get('poster'), caption=cap[:1024],
                                      reply_markup=InlineKeyboardMarkup(btn))
            await asyncio.sleep(300)
            await mat.delete()
        except (MediaEmpty, PhotoInvalidDimensions, WebpageMediaEmpty):
            pic = imdb.get('poster')
            poster = pic.replace('.jpg', "._V1_UX360.jpg")
            mat = await message.reply_photo(photo=poster, caption=cap[:1024], reply_markup=InlineKeyboardMarkup(btn))
            
            await asyncio.sleep(300)
            await mat.delete()
        except Exception as e:
            logger.exception(e)
            mat = await message.reply_text(cap, reply_markup=InlineKeyboardMarkup(btn))
            
            await asyncio.sleep(300)
            await mat.delete()
    else:
        mat = await message.reply_text(cap, reply_markup=InlineKeyboardMarkup(btn))
        
        await asyncio.sleep(300)
        await mat.delete()
    if spoll:
        await msg.message.delete()

async def advantage_spell_chok(client, msg):
    mv_id = msg.id
    mv_rqst = msg.text
    reqstr1 = msg.from_user.id if msg.from_user else 0
    reqstr = await client.get_users(reqstr1)
    settings = await get_settings(msg.chat.id)
    query = re.sub(
        r"\b(pl(i|e)*?(s|z+|ease|se|ese|(e+)s(e)?)|((send|snd|giv(e)?|gib)(\sme)?)|movie(s)?|new|latest|br((o|u)h?)*|^h(e|a)?(l)*(o)*|mal(ayalam)?|t(h)?amil|file|that|find|und(o)*|kit(t(i|y)?)?o(w)?|thar(u)?(o)*w?|kittum(o)*|aya(k)*(um(o)*)?|full\smovie|any(one)|with\ssubtitle(s)?)",
        "", msg.text, flags=re.IGNORECASE)  # plis contribute some common words
    query = query.strip() + " movie"
    try:
        movies = await get_poster(mv_rqst, bulk=True)
    except Exception as e:
        logger.exception(e)
        reqst_gle = mv_rqst.replace(" ", "+")
        button = [[
        InlineKeyboardButton('üîç s·¥á·¥Ä Ä·¥Ñ ú ·¥è…¥ …¢·¥è·¥è…¢ ü·¥á üîé', url=f"https://www.google.com/search?q={reqst_gle}")            
        ]]
        await client.send_message(chat_id=NORES_CHANNEL, text=(script.NORSLTS.format(reqstr.id, reqstr.mention, mv_rqst)))
        k = await msg.reply_text(
            text=("<b><blockquote>‚ñ™s·¥è Ä Ä è …¥·¥è Íú∞…™ ü·¥ás ·¥°·¥á Ä·¥á Íú∞·¥è·¥ú…¥·¥Ö\n\n·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä s·¥ò·¥á ü ü…™…¥…¢ …™…¥ …¢·¥è·¥è…¢ ü·¥á ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ !!</b>\n\nüö∏  è·¥è·¥ú Ä  Ä·¥áQ·¥ú·¥áÍú±·¥õ  ú·¥ÄÍú±  ô·¥á·¥á…¥ Íú±·¥á…¥·¥õ ·¥õ·¥è ·¥è·¥ú Ä ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è ÄÍú± ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ Íú∞·¥è Ä ·¥ú·¥ò ü·¥è·¥Ä·¥Ö ·¥è Ä  Ä·¥á·¥ò ü·¥Ä è</blockquote></b>"),
            reply_markup=InlineKeyboardMarkup(button),
            reply_to_message_id=msg.id
        )
        await asyncio.sleep(30)
        await msg.delete()
        await k.delete()      
        return
    movielist = []
    if not movies:
        reqst_gle = mv_rqst.replace(" ", "+")
        button = [[
        InlineKeyboardButton('üîç s·¥á·¥Ä Ä·¥Ñ ú ·¥è…¥ …¢·¥è·¥è…¢ ü·¥á üîé', url=f"https://www.google.com/search?q={reqst_gle}")   
        ]]
        await client.send_message(chat_id=NORES_CHANNEL, text=(script.NORSLTS.format(reqstr.id, reqstr.mention, mv_rqst)))
        k = await msg.reply_text(
            text=(f"<b><blockquote>s·¥è Ä Ä è …¥·¥è Íú∞…™ ü·¥ás ·¥°·¥á Ä·¥á Íú∞·¥è·¥ú…¥·¥Ö\n\n·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä s·¥ò·¥á ü ü…™…¥…¢ …™…¥ …¢·¥è·¥è…¢ ü·¥á ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ !!</b>\n\nüö∏  è·¥è·¥ú Ä  Ä·¥áQ·¥ú·¥áÍú±·¥õ  ú·¥ÄÍú±  ô·¥á·¥á…¥ Íú±·¥á…¥·¥õ ·¥õ·¥è ·¥è·¥ú Ä ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è ÄÍú± ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ Íú∞·¥è Ä ·¥ú·¥ò ü·¥è·¥Ä·¥Ö ·¥è Ä  Ä·¥á·¥ò ü·¥Ä è</blockquote></b>"),
            reply_markup=InlineKeyboardMarkup(button),
            reply_to_message_id=msg.id
        )
        await asyncio.sleep(30)
        await msg.delete()
        await k.delete()
        return
    movielist = [movie.get('title') for movie in movies]
    SPELL_CHECK[mv_id] = movielist
    btn = [
        [
            InlineKeyboardButton(
                text=movie_name.strip(),
                callback_data=f"spolling#{reqstr1}#{k}",
            )
        ]
        for k, movie_name in enumerate(movielist)
    ]
    btn.append([InlineKeyboardButton(text="üö∏ ‡¥â‡µº‡¥µ‡¥∂‡¥ø ‡¥§‡µÄ‡¥Ø‡¥±‡µç‡¥±‡µá‡¥¥‡µç‚Äå‡¥∏‡µç üö∏", url="https://t.me/+JQeou0PAx_Y0ZGFl")])
    ruby = await msg.reply(f"<b><blockquote>‚óç N·¥è M·¥è·¥†…™·¥á F·¥è·¥ú…¥·¥Ö F·¥è Ä Y·¥è·¥ú Ä Q·¥ú·¥á Ä è {mv_rqst}\n‚óç {mv_rqst} ‡¥é‡¥®‡µç‡¥® ‡¥Æ‡µÇ‡¥µ‡¥ø ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥æ‡µª ‡¥ï‡¥¥‡¥ø‡¥û‡µç‡¥û‡¥ø‡¥≤‡µç‡¥≤ \n\n‚òû C ú·¥è·¥èÍú±·¥á ·¥õ ú·¥á ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ ·¥ç·¥è·¥†…™·¥á …¥·¥Ä·¥ç·¥á  ô·¥á ü·¥è·¥° üëá\n‚òû ‡¥§‡¥æ‡¥¥‡µÜ ‡¥ï‡µä‡¥ü‡µÅ‡¥§‡µç‡¥§‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥±‡¥ø‡¥∏‡µæ‡¥ü‡µç‡¥ü‡µç‚Äå ‡¥®‡µã‡¥ï‡µç‡¥ï‡¥ø ‡¥µ‡µá‡¥£‡µç‡¥ü ‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ‡¥Ø‡¥ø‡µΩ ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï\n\nüö∏NB:·¥Ö·¥è…¥·¥õ ·¥Ñ ü…™·¥Ñ·¥ã  è·¥á·¥Ä Ä ·¥ç·¥è·¥†…™·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ñ ü…™·¥Ñ·¥ã ·¥ç·¥è·¥†…™·¥á …¥·¥Ä·¥ç·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥è…¥ ü è\nüö∏‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥µ‡µº‡¥∑‡¥Ç ‡¥â‡¥≥‡µç‡¥≥ ‡¥¨‡¥ü‡µç‡¥ü‡¥£‡¥ø‡µΩ ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥∞‡µÅ‡¥§‡µç ‡¥™‡µá‡¥∞‡µç ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Ç ‡¥â‡¥≥‡µç‡¥≥‡¥§‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÇ</blockquote></b>",
                    reply_markup=InlineKeyboardMarkup(btn),
                    reply_to_message_id=msg.id
    )
    await asyncio.sleep(30)
    await ruby.delete()
    
async def global_filters(client, message, text=False):
    group_id = message.chat.id
    name = text or message.text
    reply_id = message.reply_to_message.id if message.reply_to_message else message.id
    keywords = await get_gfilters('gfilters')
    for keyword in reversed(sorted(keywords, key=len)):
        pattern = r"( |^|[^\w])" + re.escape(keyword) + r"( |$|[^\w])"
        if re.search(pattern, name, flags=re.IGNORECASE):
            reply_text, btn, alert, fileid = await find_gfilter('gfilters', keyword)

            if reply_text:
                reply_text = reply_text.replace("\\n", "\n").replace("\\t", "\t")

            if btn is not None:
                try:
                    if fileid == "None":
                        if btn == "[]":
                            knd3 = await client.send_message(
                                group_id, 
                                reply_text, 
                                disable_web_page_preview=True,
                                reply_to_message_id=reply_id
                            )
                            await asyncio.sleep(454)
                            await knd3.delete()
                            await message.delete()

                        else:
                            button = eval(btn)
                            knd2 = await client.send_message(
                                group_id,
                                reply_text,
                                disable_web_page_preview=True,
                                reply_markup=InlineKeyboardMarkup(button),
                                reply_to_message_id=reply_id
                            )
                            await asyncio.sleep(465)
                            await knd2.delete()
                            await message.delete()

                    elif btn == "[]":
                        knd1 = await client.send_cached_media(
                            group_id,
                            fileid,
                            caption=reply_text or "",
                            reply_to_message_id=reply_id
                        )
                        await asyncio.sleep(565)
                        await knd1.delete()
                        await message.delete()

                    else:
                        button = eval(btn)
                        knd = await message.reply_cached_media(
                            fileid,
                            caption=reply_text or "",
                            reply_markup=InlineKeyboardMarkup(button),
                            reply_to_message_id=reply_id
                        )
                        await asyncio.sleep(475)
                        await knd.delete()
                        await message.delete()

                except Exception as e:
                    logger.exception(e)
                break
    else:
        return False
